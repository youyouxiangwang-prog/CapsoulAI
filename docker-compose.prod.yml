version: '3.8'

services:
  # Nginx reverse proxy (HTTP only for IP-based access)
  nginx:
    image: nginx:alpine
    container_name: capsoulai-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - capsoulai-prod

  # PostgreSQL (生产配置)
  postgres:
    image: postgres:15
    container_name: capsoulai-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-capsoulai_prod}
      POSTGRES_USER: ${POSTGRES_USER:-capsoulai_prod_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-capsoulai_prod_user} -d ${POSTGRES_DB:-capsoulai_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - capsoulai-prod
    # 生产环境不暴露数据库端口到外部
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis (生产配置)
  redis:
    image: redis:7-alpine
    container_name: capsoulai-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - capsoulai-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # FastAPI应用 (生产配置)
  web:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: capsoulai-web-prod
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-capsoulai_prod_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-capsoulai_prod}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - RECORDINGS_DIR=/app/uploads
      - ENVIRONMENT=production
      - DEBUG=false
    volumes:
      - upload_prod_data:/app/uploads
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - capsoulai-prod
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker (生产配置)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=4 --hostname=worker@%h
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-capsoulai_prod_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-capsoulai_prod}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - RECORDINGS_DIR=/app/uploads
      - CELERY_WORKER_NAME=${CELERY_WORKER_NAME:-prod-worker}
    volumes:
      - upload_prod_data:/app/uploads
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - capsoulai-prod
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Beat (生产配置)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    command: celery -A app.workers.celery_app beat --loglevel=info
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-capsoulai_prod_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-capsoulai_prod}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - RECORDINGS_DIR=/app/uploads
    volumes:
      - upload_prod_data:/app/uploads
      - celery_beat_prod_data:/app/celerybeat-schedule
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - capsoulai-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_prod_data:
  redis_prod_data:
  upload_prod_data:
  celery_beat_prod_data:
  nginx_logs:
  app_logs:

networks:
  capsoulai-prod:
    driver: bridge
